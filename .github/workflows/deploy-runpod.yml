name: üöÄ CI/CD - Deploy GPU Agent to RunPod (Spot Instance)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy-gpu:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v3

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: üîê Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üß± Build & Push GPU Docker Image
        run: |
          docker build -f docker/Dockerfile.gpu -t ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest .
          docker push ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest

      - name: üöÄ Launch GPU Spot Pod via REST API
        id: launch_pod
        run: |
          UNIQUE_POD_NAME="github-actions-pod-${{ github.run_id }}"
          echo "Launching Spot Pod: $UNIQUE_POD_NAME"

          # Verify API key works
          echo "üîç Testing API key..."
          curl -v -X GET "https://api.runpod.io/v1/pods" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}"

          # Create spot pod
          response=$(curl -v -X POST "https://api.runpod.io/v1/pods" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
          {
            "name": "$UNIQUE_POD_NAME",
            "imageName": "ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest",
            "gpuTypeId": "NVIDIA GeForce RTX 3090",
            "cloudType": "COMMUNITY",
            "containerDiskInGb": 20,
            "volumeInGb": 1,
            "gpuCount": 1,
            "ports": "8080/http",
            "memoryInGb": 24,
            "vcpuCount": 4,
            "volumeMountPath": "/runpod",
            "bidPerGpu": 0.22,
            "minVcpuCount": 4,
            "minMemoryInGb": 24
          }
          EOF
          )

          echo "üì° Full launch response: $response"
          POD_ID=$(echo "$response" | jq -r '.id')

          if [ "$POD_ID" = "null" ] || [ -z "$POD_ID" ]; then
            echo "‚ùå Failed to launch pod. Full response:"
            echo "$response"
            exit 1
          fi

          echo "‚úÖ Pod ID: $POD_ID"
          echo "RUNPOD_POD_ID=$POD_ID" >> $GITHUB_ENV
          echo "pod_id=$POD_ID" >> $GITHUB_OUTPUT

      - name: üîÑ Poll Pod Status via REST API
        id: poll_status
        run: |
          POD_ID="${{ steps.launch_pod.outputs.pod_id }}"
          echo "Polling pod status for ID: $POD_ID..."

          for i in {1..30}; do
            sleep 20

            response=$(curl -s -X GET "https://api.runpod.io/v1/pods/$POD_ID" \
              -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}")

            echo "üì° Response: $response"
            STATUS=$(echo "$response" | jq -r '.status')
            echo "‚è≥ Pod status: $STATUS"

            if [ "$STATUS" = "RUNNING" ]; then
              PUBLIC_IP=$(echo "$response" | jq -r '.publicIp')
              if [ -n "$PUBLIC_IP" ] && [ "$PUBLIC_IP" != "null" ]; then
                echo "‚úÖ Pod is live at: http://$PUBLIC_IP:8080"
                echo "RUNPOD_URL=http://$PUBLIC_IP:8080" >> $GITHUB_ENV
                echo "RUNPOD_URL=http://$PUBLIC_IP:8080" >> $GITHUB_OUTPUT
                break
              fi
            fi
          done

          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "null" ]; then
            echo "‚ùå Pod failed to start or no public IP assigned."
            exit 1
          fi

      - name: üîê Store Pod URL as GitHub Secret
        run: gh secret set RUNPOD_URL --body "${{ steps.poll_status.outputs.RUNPOD_URL }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}