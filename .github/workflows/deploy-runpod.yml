name: 🚀 CI/CD - Deploy GPU Agent to RunPod (Secure Cloud)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy-gpu:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v3

      - name: 🐳 Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 🧱 Build & Push GPU Docker Image
        run: |
          docker build -f docker/Dockerfile.gpu -t ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest .
          docker push ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest

      - name: 🔍 Verify Image Exists on GHCR (Public)
        run: |
          docker manifest inspect ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest > /dev/null

      - name: 🚀 Launch GPU Pod via GraphQL API (Secure Cloud)
        id: launch_pod
        run: |
          set -e

          # 🔧 Define dynamic values
          UNIQUE_POD_NAME="github-actions-pod-${{ github.run_id }}"
          GHCR_IMAGE="ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest"

          echo "🚀 Creating secure pod: $UNIQUE_POD_NAME"

          # 🔧 Define the GraphQL payload with placeholders
          GRAPHQL_QUERY=$(cat <<'EOF'
      {
        "query": "mutation PodDeploy { podFindAndDeployOnDemand(input: { cloudType: SECURE, gpuCount: 1, volumeInGb: 1, containerDiskInGb: 20, minVcpuCount: 8, minMemoryInGb: 31, gpuTypeId: \"NVIDIA RTX A4500\", name: \"__POD_NAME__\", imageName: \"__IMAGE__\", ports: \"8080/http\", volumeMountPath: \"/runpod\", env: [
          { key: \"OPENAI_API_KEY\", value: \"{{ RUNPOD_SECRET_OPENAI_API_KEY }}\" },
          { key: \"LANGCHAIN_API_KEY\", value: \"{{ RUNPOD_SECRET_LANGCHAIN_API_KEY }}\" },
          { key: \"PINECONE_API_KEY\", value: \"{{ RUNPOD_SECRET_PINECONE_API_KEY }}\" },
          { key: \"PINECONE_INDEX_NAME\", value: \"{{ RUNPOD_SECRET_PINECONE_INDEX_NAME }}\" },
          { key: \"PINECONE_INDEX_HOST\", value: \"{{ RUNPOD_SECRET_PINECONE_INDEX_HOST }}\" },
          { key: \"PINECONE_REGION\", value: \"{{ RUNPOD_SECRET_PINECONE_REGION }}\" },
          { key: \"LANGCHAIN_PROJECT\", value: \"{{ RUNPOD_SECRET_LANGCHAIN_PROJECT }}\" },
          { key: \"SERPAPI_API_KEY\", value: \"{{ RUNPOD_SECRET_SERPAPI_API_KEY }}\" },
          { key: \"GEMINI_API_KEY\", value: \"{{ RUNPOD_SECRET_GEMINI_API_KEY }}\" },
          { key: \"HF_TOKEN\", value: \"{{ RUNPOD_SECRET_HF_TOKEN }}\" },
          { key: \"GROQ_API_KEY\", value: \"{{ RUNPOD_SECRET_GROQ_API_KEY }}\" },
          { key: \"LANGFUSE_PUBLIC_KEY\", value: \"{{ RUNPOD_SECRET_LANGFUSE_PUBLIC_KEY }}\" },
          { key: \"LANGFUSE_SECRET_KEY\", value: \"{{ RUNPOD_SECRET_LANGFUSE_SECRET_KEY }}\" },
          { key: \"LANGFUSE_HOST\", value: \"{{ RUNPOD_SECRET_LANGFUSE_HOST }}\" },
          { key: \"USE_GPU\", value: \"{{ RUNPOD_SECRET_USE_GPU }}\" },
          { key: \"MODEL_PATH\", value: \"{{ RUNPOD_SECRET_MODEL_PATH }}\" }
        ] }) { id } }"
      }
      EOF
          )

          # 🔁 Replace placeholders with actual values
          GRAPHQL_QUERY="${GRAPHQL_QUERY/__POD_NAME__/$UNIQUE_POD_NAME}"
          GRAPHQL_QUERY="${GRAPHQL_QUERY/__IMAGE__/$GHCR_IMAGE}"

          echo "✅ GraphQL query being sent:"
          echo "$GRAPHQL_QUERY"

          # 🚀 Send the request
          HTTP_RESPONSE=$(mktemp)
          HTTP_STATUS=$(curl -s -w "%{http_code}" -o "$HTTP_RESPONSE" -X POST "https://api.runpod.io/graphql" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY")

          RESPONSE=$(cat "$HTTP_RESPONSE")
          rm "$HTTP_RESPONSE"

          echo "📡 Full launch response: $RESPONSE"

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "❌ HTTP error: $HTTP_STATUS"
            exit 1
          fi

          POD_ID=$(echo "$RESPONSE" | jq -r '.data.podFindAndDeployOnDemand.id // empty')

          if [ -z "$POD_ID" ]; then
            echo "❌ Failed to launch pod. Check GPU availability, image visibility, and secret names."
            echo "$RESPONSE"
            exit 1
          fi

          echo "✅ Pod ID: $POD_ID"
          echo "RUNPOD_POD_ID=$POD_ID" >> $GITHUB_ENV
          echo "pod_id=$POD_ID" >> $GITHUB_OUTPUT

      - name: 🔄 Poll Pod Status via GraphQL
        id: poll_status
        run: |
          POD_ID="${{ steps.launch_pod.outputs.pod_id }}"
          echo "⌛ Polling pod status for ID: $POD_ID..."

          for i in {1..45}; do
            sleep 120
            STATUS_QUERY="{\"query\":\"query PodStatus { pod(input: { podId: \\\"$POD_ID\\\" }) { status runtime { ports { ip isIpPublic publicPort type } } } }\"}"
            response=$(curl -s -X POST "https://api.runpod.io/graphql" \
              -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "$STATUS_QUERY")

            PORTS_EXIST=$(echo "$response" | jq -e '.data.pod.runtime.ports | type == "array" and length > 0' >/dev/null 2>&1 && echo "yes" || echo "no")

            if [ "$PORTS_EXIST" = "yes" ]; then
              PORT_INFO=$(echo "$response" | jq -c '.data.pod.runtime.ports[] | select(.isIpPublic == true and .publicPort == 8080)' || true)
              PUBLIC_IP=$(echo "$PORT_INFO" | jq -r '.ip // empty')
              PUBLIC_PORT=$(echo "$PORT_INFO" | jq -r '.publicPort // empty')

              echo "🔄 Port check $i: $PUBLIC_IP:$PUBLIC_PORT"

              if [ -n "$PUBLIC_IP" ]; then
                echo "✅ Pod is live at: http://$PUBLIC_IP:$PUBLIC_PORT"
                echo "RUNPOD_URL=http://$PUBLIC_IP:$PUBLIC_PORT" >> $GITHUB_ENV
                echo "RUNPOD_URL=http://$PUBLIC_IP:$PUBLIC_PORT" >> $GITHUB_OUTPUT
                break
              fi
            fi

            echo "🔄 Status check $i: $STATUS"
          done

          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "null" ]; then
            echo "❌ Pod failed to start within timeout"
            exit 1
          fi

      - name: 🔐 Store Pod URL as GitHub Secret
        if: success()
        run: gh secret set RUNPOD_URL --body "${{ steps.poll_status.outputs.RUNPOD_URL }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📣 Deployment Summary
        if: success()
        run: echo "🚀 Your app is live at ${{ steps.poll_status.outputs.RUNPOD_URL }}"
