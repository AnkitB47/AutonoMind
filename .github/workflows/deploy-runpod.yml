name: 🚀 CI/CD - Deploy GPU Agent to RunPod (Secure Cloud)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy-gpu:
    runs-on: ubuntu-latest

    steps:
      - name: 📦 Checkout Repository
        uses: actions/checkout@v3

      - name: 🐳 Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: 🔐 Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: 🧱 Build & Push GPU Docker Image
        run: |
          docker build -f docker/Dockerfile.gpu -t ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest .
          docker push ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest

      - name: 🔍 Verify Image Exists on GHCR (Public)
        run: |
          docker manifest inspect ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest > /dev/null

      - name: 🚀 Launch GPU Pod via GraphQL API (Secure Cloud)
        id: launch_pod
        run: |
          set -e

          UNIQUE_POD_NAME="github-actions-pod-${{ github.run_id }}"
          GHCR_IMAGE="ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest"
          echo "🚀 Creating secure pod: $UNIQUE_POD_NAME"

          GRAPHQL_QUERY="{\"query\":\"mutation PodDeploy { podFindAndDeployOnDemand(input: { cloudType: SECURE, supportPublicIp: false, gpuCount: 1, volumeInGb: 1, containerDiskInGb: 20, minVcpuCount: 8, minMemoryInGb: 31, gpuTypeId: \\\"NVIDIA RTX A4500\\\", name: \\\"$UNIQUE_POD_NAME\\\", imageName: \\\"$GHCR_IMAGE\\\", ports: \\\"8000/http,8080/http,3000/http\\\", volumeMountPath: \\\"/runpod\\\", env: [ { key: \\\"OPENAI_API_KEY\\\", value: \\\"${{ secrets.OPENAI_API_KEY }}\\\" }, { key: \\\"LANGCHAIN_API_KEY\\\", value: \\\"${{ secrets.LANGCHAIN_API_KEY }}\\\" }, { key: \\\"PINECONE_API_KEY\\\", value: \\\"${{ secrets.PINECONE_API_KEY }}\\\" }, { key: \\\"PINECONE_INDEX_NAME\\\", value: \\\"${{ secrets.PINECONE_INDEX_NAME }}\\\" }, { key: \\\"PINECONE_INDEX_HOST\\\", value: \\\"${{ secrets.PINECONE_INDEX_HOST }}\\\" }, { key: \\\"PINECONE_REGION\\\", value: \\\"${{ secrets.PINECONE_REGION }}\\\" }, { key: \\\"LANGCHAIN_PROJECT\\\", value: \\\"${{ secrets.LANGCHAIN_PROJECT }}\\\" }, { key: \\\"SERPAPI_API_KEY\\\", value: \\\"${{ secrets.SERPAPI_API_KEY }}\\\" }, { key: \\\"GEMINI_API_KEY\\\", value: \\\"${{ secrets.GEMINI_API_KEY }}\\\" }, { key: \\\"HF_TOKEN\\\", value: \\\"${{ secrets.HF_TOKEN }}\\\" }, { key: \\\"GROQ_API_KEY\\\", value: \\\"${{ secrets.GROQ_API_KEY }}\\\" }, { key: \\\"LANGFUSE_PUBLIC_KEY\\\", value: \\\"${{ secrets.LANGFUSE_PUBLIC_KEY }}\\\" }, { key: \\\"LANGFUSE_SECRET_KEY\\\", value: \\\"${{ secrets.LANGFUSE_SECRET_KEY }}\\\" }, { key: \\\"LANGFUSE_HOST\\\", value: \\\"${{ secrets.LANGFUSE_HOST }}\\\" }, { key: \\\"FAISS_INDEX_PATH\\\", value: \\\"${{ secrets.FAISS_INDEX_PATH }}\\\" }, { key: \\\"USE_GPU\\\", value: \\\"${{ secrets.USE_GPU }}\\\" }, { key: \\\"MODEL_PATH\\\", value: \\\"${{ secrets.MODEL_PATH }}\\\" } ] }) { id } }\"}          
          
          echo "✅ Sending GraphQL mutation:"
          echo "$GRAPHQL_QUERY"

          HTTP_RESPONSE=$(mktemp)
          HTTP_STATUS=$(curl -s -w "%{http_code}" -o "$HTTP_RESPONSE" -X POST "https://api.runpod.io/graphql" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d "$GRAPHQL_QUERY")

          RESPONSE=$(cat "$HTTP_RESPONSE")
          rm "$HTTP_RESPONSE"

          echo "📡 Full launch response: $RESPONSE"

          if [ "$HTTP_STATUS" -ne 200 ]; then
            echo "❌ HTTP error: $HTTP_STATUS"
            exit 1
          fi

          POD_ID=$(echo "$RESPONSE" | jq -r '.data.podFindAndDeployOnDemand.id // empty')

          if [ -z "$POD_ID" ]; then
            echo "❌ Failed to launch pod. Check GPU availability, image visibility, and secret names."
            echo "$RESPONSE"
            exit 1
          fi

          echo "✅ Pod ID: $POD_ID"
          echo "RUNPOD_POD_ID=$POD_ID" >> $GITHUB_ENV
          echo "pod_id=$POD_ID" >> $GITHUB_OUTPUT

      - name: 🔄 Poll Pod Status via GraphQL
        id: poll_status
        run: |
          set -e

          # Install jq if needed
          sudo apt-get update && sudo apt-get install -y jq

          POD_ID="${{ steps.launch_pod.outputs.pod_id }}"
          echo "⌛ Polling pod status for ID: $POD_ID..."
          for i in {1..45}; do
            echo "🔁 Poll attempt $i..."
            sleep 30

            STATUS_QUERY="{\"query\":\"query PodStatus { pod(input: { podId: \\\"$POD_ID\\\" }) { desiredStatus runtime { ports { ip isIpPublic publicPort type } } } }\"}"
            response=$(curl -s -X POST "https://api.runpod.io/graphql" \
              -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d "$STATUS_QUERY")

            STATUS=$(echo "$response" | jq -r '.data.pod.desiredStatus')
            echo "🔄 Status check $i: $STATUS"

            # Extract secure Cloud public ports for 8000 (FastAPI), 8080 (Streamlit) and 3000 (Frontend)
            FASTAPI_INFO=$(echo "$response" | jq -c '.data.pod.runtime.ports[] | select(.privatePort == 8000)' || true)
            STREAMLIT_INFO=$(echo "$response" | jq -c '.data.pod.runtime.ports[] | select(.privatePort == 8080)' || true)
            FRONTEND_INFO=$(echo "$response" | jq -c '.data.pod.runtime.ports[] | select(.privatePort == 3000)' || true)

            FASTAPI_PUBLIC=$(echo "$FASTAPI_INFO" | jq -r '.publicPort // empty')
            STREAMLIT_PUBLIC=$(echo "$STREAMLIT_INFO" | jq -r '.publicPort // empty')
            FRONTEND_PUBLIC=$(echo "$FRONTEND_INFO" | jq -r '.publicPort // empty')

            if [ -n "$FASTAPI_PUBLIC" ] && [ -n "$STREAMLIT_PUBLIC" ] && [ -n "$FRONTEND_PUBLIC" ] && [ "$STATUS" = "RUNNING" ]; then
              FASTAPI_URL="https://$POD_ID-$FASTAPI_PUBLIC.proxy.runpod.net"
              STREAMLIT_URL="https://$POD_ID-$STREAMLIT_PUBLIC.proxy.runpod.net"
              FRONTEND_URL="https://$POD_ID-$FRONTEND_PUBLIC.proxy.runpod.net"
              echo "✅ FastAPI is live at: $FASTAPI_URL"
              echo "✅ Streamlit is live at: $STREAMLIT_URL"
              echo "✅ Frontend is live at: $FRONTEND_URL"
              echo "fastapi_url=$FASTAPI_URL" >> $GITHUB_OUTPUT
              echo "streamlit_url=$STREAMLIT_URL" >> $GITHUB_OUTPUT
              echo "frontend_url=$FRONTEND_URL" >> $GITHUB_OUTPUT
              echo "FASTAPI_URL=$FASTAPI_URL" >> $GITHUB_ENV
              echo "STREAMLIT_URL=$STREAMLIT_URL" >> $GITHUB_ENV
              echo "FRONTEND_URL=$FRONTEND_URL" >> $GITHUB_ENV
             break
            fi
          done

          if [[ -z "$FASTAPI_URL" || -z "$STREAMLIT_URL" || -z "$FRONTEND_URL" ]]; then
            echo "❌ One or both services failed to start within timeout"
            echo "ℹ️ Last response: $response"
            exit 1
          fi

      - name: 🔐 Store Public URLs as GitHub Secrets
        if: success()
        run: |
          gh secret set FASTAPI_URL --body "${{ steps.poll_status.outputs.fastapi_url }}"
          gh secret set STREAMLIT_URL --body "${{ steps.poll_status.outputs.streamlit_url }}"
          gh secret set FRONTEND_URL --body "${{ steps.poll_status.outputs.frontend_url }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📣 Deployment Summary
        if: success()
        run: |
          echo "🚀 Your app is live!"
          echo "✅ FastAPI URL: ${{ steps.poll_status.outputs.fastapi_url }}"
          echo "✅ Streamlit URL: ${{ steps.poll_status.outputs.streamlit_url }}"
          echo "✅ Frontend URL: ${{ steps.poll_status.outputs.frontend_url }}"
