name: üöÄ CI/CD - Deploy GPU Agent to RunPod (Secure Cloud)

on:
  workflow_dispatch:
  push:
    branches: [main]

jobs:
  deploy-gpu:
    runs-on: ubuntu-latest

    steps:
      - name: üì¶ Checkout Repository
        uses: actions/checkout@v3

      - name: üê≥ Set up Docker
        uses: docker/setup-buildx-action@v2

      - name: üîê Login to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USER }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: üß± Build & Push GPU Docker Image
        run: |
          docker build -f docker/Dockerfile.gpu -t ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest .
          docker push ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest

      - name: üîç Verify Image Exists on GHCR (Public)
        run: |
          docker manifest inspect ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest > /dev/null

      - name: üöÄ Launch GPU Pod via GraphQL API (Secure Cloud)
        id: launch_pod
        run: |
          UNIQUE_POD_NAME="github-actions-pod-${{ github.run_id }}"
          echo "üöÄ Creating secure pod: $UNIQUE_POD_NAME"

          response=$(curl -s -X POST "https://api.runpod.io/graphql" \
            -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
            -H "Content-Type: application/json" \
            -d @- <<EOF
{
  "query": "mutation PodDeploy { podFindAndDeployOnDemand(input: { 
    cloudType: SECURE, 
    gpuCount: 1, 
    volumeInGb: 1, 
    containerDiskInGb: 20, 
    minVcpuCount: 8, 
    minMemoryInGb: 31, 
    gpuTypeId: \\"RTX A4500\\", 
    name: \\"$UNIQUE_POD_NAME\\", 
    imageName: \\"ghcr.io/${{ secrets.GHCRL_USER }}/autonomind-gpu:latest\\", 
    ports: \\"8080/http\\", 
    volumeMountPath: \\"/runpod\\" 
  }) { id } }"
}
EOF
          )

          echo "üì° Full launch response: $response"
          POD_ID=$(echo "$response" | jq -r '.data.podFindAndDeployOnDemand.id')

          if [ -z "$POD_ID" ] || [ "$POD_ID" = "null" ]; then
            echo "‚ùå Failed to launch pod. Check GPU availability and image visibility."
            echo "Full response:"
            echo "$response"
            exit 1
          fi

          echo "‚úÖ Pod ID: $POD_ID"
          echo "RUNPOD_POD_ID=$POD_ID" >> $GITHUB_ENV
          echo "pod_id=$POD_ID" >> $GITHUB_OUTPUT


      - name: üîÑ Poll Pod Status via GraphQL
        id: poll_status
        run: |
          POD_ID="${{ steps.launch_pod.outputs.pod_id }}"
          echo "‚åõ Polling pod status for ID: $POD_ID..."

          for i in {1..30}; do
            sleep 20
            response=$(curl -s -X POST "https://api.runpod.io/graphql" \
              -H "Authorization: Bearer ${{ secrets.RUNPOD_API_KEY }}" \
              -H "Content-Type: application/json" \
              -d @- <<EOF
{
  "query": "query PodStatus { pod(input: { podId: \\"$POD_ID\\" }) { status publicIp } }"
}
EOF
            )

            STATUS=$(echo "$response" | jq -r '.data.pod.status')
            PUBLIC_IP=$(echo "$response" | jq -r '.data.pod.publicIp')
            echo "üîÑ Status check $i: $STATUS"

            if [ "$STATUS" = "RUNNING" ] && [ "$PUBLIC_IP" != "null" ]; then
              echo "‚úÖ Pod is live at: http://$PUBLIC_IP:8080"
              echo "RUNPOD_URL=http://$PUBLIC_IP:8080" >> $GITHUB_ENV
              echo "RUNPOD_URL=http://$PUBLIC_IP:8080" >> $GITHUB_OUTPUT
              break
            fi
          done

          if [ -z "$PUBLIC_IP" ] || [ "$PUBLIC_IP" = "null" ]; then
            echo "‚ùå Pod failed to start within timeout"
            exit 1
          fi

      - name: üîê Store Pod URL as GitHub Secret
        if: success()
        run: gh secret set RUNPOD_URL --body "${{ steps.poll_status.outputs.RUNPOD_URL }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
